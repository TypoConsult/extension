<?php

declare(strict_types=1);

namespace TYPOCONSULT\{{extensionNamePascal}}\Controller;

use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
use TYPOCONSULT\{{extensionNamePascal}}\Domain\Repository\ContentRepository;
use TYPOCONSULT\TcSys\Utility\CommonUtility;
use TYPOCONSULT\TcSys\Utility\PageResourceUtility;
use TYPOCONSULT\TcSys\Utility\SassCompilerUtility;

class PluginController extends ActionController
{
    protected const EXTENSION_KEY = '{{extensionNameSnake}}';

    /**
     * @var ContentRepository
     */
    protected ContentRepository $contentRepository;

    /**
     * @var array
     */
    protected array $cObjData = [];

    /**
     * @param ContentRepository $contentRepository
     */
    public function injectContentRepository(ContentRepository $contentRepository): void
    {
        $this->contentRepository = $contentRepository;
    }

    public function initializeAction(): void
    {
        // @extensionScannerIgnoreLine
        $this->cObjData = $this->configurationManager->getContentObject()->data;
    }

    public function showAction(): void
    {
        $content = $this->contentRepository->findByUid($this->cObjData['uid']);

        if ($content) {
            $this->view->assign('content', $content);

            $this->styleBlock();
            $this->scriptBlock();
        }
    }

    private function styleBlock(): void
    {
        if (isset($this->settings['stylesPaths']) && is_array($this->settings['stylesPaths'])) {
            $styleSheet = '';

            $GLOBALS['TSFE']->pSetup['styles.']['variables.'] = array_merge(
                $GLOBALS['TSFE']->pSetup['styles.']['variables.'],
                [
                    'className' => $this->settings['className']
                ]
            );

            foreach ($this->settings['stylesPaths'] as $path) {
                $styleSheet .= SassCompilerUtility::process($path);
            }

            PageResourceUtility::addStyleBlock(
                CommonUtility::getUniqueNumberFromString(self::EXTENSION_KEY),
                $styleSheet,
                ['mode' => 'inline']
            );
        }
    }

    private function scriptBlock(): void
    {
        if (isset($this->settings['javascriptPaths']) && is_array($this->settings['javascriptPaths'])) {
            $javaScript = '';

            foreach ($this->settings['javascriptPaths'] as $path) {
                $javaScript .= @file_get_contents(CommonUtility::getPath($path));
            }

            $search = [
                '###tabletMinWidth###',
                '###tabletMaxWidth###'
            ];

            $replace = [
                intval($this->settings['tabletMinWidth']),
                intval($this->settings['tabletMaxWidth'])
            ];

            PageResourceUtility::addScriptBlock(
                CommonUtility::getUniqueNumberFromString(self::EXTENSION_KEY),
                str_replace($search, $replace, $javaScript),
                ['mode' => 'inline']
            );
        }
    }
}
